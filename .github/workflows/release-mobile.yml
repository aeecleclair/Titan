name: Release mobile bundles

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*\+*-alpha'
      - 'v*.*.*\+*-alpha'

jobs:
  extract-version:
    name: Determine version
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-version.outputs.tag }}
      isAlpha: ${{ steps.get-version.outputs.isAlpha }}
      versionCode: ${{ steps.get-version.outputs.versionCode }}
      versionName: ${{ steps.get-version.outputs.versionName }}
    steps:
      - name: Determine version
        id: get-version
        run: |
          tag=${GITHUB_REF#refs/*/}
          [[ $tag == *'-alpha' ]] && isAlpha=1 || isAlpha=0;
          versionCode=${tag##*+}
          versionCode=${versionCode%-*}
          versionName=${tag%+*}
          versionName=${versionName#v}
          echo tag=$tag >> $GITHUB_OUTPUT
          echo isAlpha=$isAlpha >> $GITHUB_OUTPUT
          echo versionCode=$versionCode >> $GITHUB_OUTPUT
          echo versionName=$versionName >> $GITHUB_OUTPUT
  
  build:
    name: Release Titan ${{ needs.extract-version.outputs.tag }} ${{ matrix.name }}
    runs-on: macos-latest
    needs: [extract-version]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: 'appbundle'
            name: 'AAB'
            path: build/app/outputs/bundle/release/app-signed.aab
          - target: 'ipa'
            name: 'IPA'
            path: build/ios/ipa/*.ipa
    
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      
      - name: Setup Java
        if: matrix.name == 'AAB'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17.x'
          cache: 'gradle'
      
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.13'
          cache: true
      
      - name: Get Packages
        run: flutter pub get
      
      - name: Cleanup 🧹
        run: flutter clean
      
      - name: Configure env
        run: |
          echo THE_MOVIE_DB_API=$THE_MOVIE_DB_API >> .env
          echo DEBUG_HOST=$DEBUG_HOST >> .env
          echo RELEASE_HOST=$RELEASE_HOST >> .env
        env:
          THE_MOVIE_DB_API: ${{ secrets.THE_MOVIE_DB_API }}
          DEBUG_HOST: ${{ secrets.DEBUG_HOST }}
          RELEASE_HOST: ${{ secrets.RELEASE_HOST }}
      
      - name: Add Firebase configuration for production
        if: ${{ !needs.extract-version.outputs.isAlpha }}
        run: |
          echo $GOOGLE_SERVICES_JSON_BASE64 | base64 -d > android/app/google-services.json
          echo $GOOGLE_SERVICE_INFO_PLIST_BASE64 | base64 -d > ios/Runner/GoogleService-Info.plist
        env:
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
          GOOGLE_SERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
      
      - name: Add Firebase configuration for Alpha
        if: ${{ needs.extract-version.outputs.isAlpha }}
        run: |
          echo $GOOGLE_SERVICES_ALPHA_JSON_BASE64 | base64 -d > android/app/google-services.json
          echo $GOOGLE_SERVICE_INFO_ALPHA_PLIST_BASE64 | base64 -d > ios/Runner/GoogleService-Info.plist
        env:
          GOOGLE_SERVICES_ALPHA_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_ALPHA_JSON_BASE64 }}
          GOOGLE_SERVICE_INFO_ALPHA_PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_ALPHA_PLIST_BASE64 }}
      
      - name: Create the Keystore
        if: matrix.name == 'AAB'
        run: |
          echo ${{ secrets.KEYSTORE_BASE64 }} | base64 -d > $RUNNER_TEMP/myecl.keystore
          echo storePassword=${{ secrets.STORE_PASSWORD }} >> android/key.properties
          echo keyPassword=${{ secrets.KEY_PASSWORD }} >> android/key.properties
          echo keyAlias=${{ secrets.KEY_ALIAS }} >> android/key.properties
          echo storeFile=$RUNNER_TEMP/myecl.keystore >> android/key.properties
      
      - name: Set alpha properties
        if: ${{ needs.extract-version.outputs.isAlpha }}
        run: |
          rm assets/images/icon.png
          mv assets/images/icon_alpha.png assets/images/icon.png
          rm assets/images/logo.png
          mv assets/images/logo_alpha.png assets/images/logo.png
      
      - name: Build 🔧
        run: flutter build ${{ matrix.target }} --release --build-name ${{ needs.extract-version.outputs.versionName }} --build-number ${{ needs.extract-version.outputs.versionCode }}
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: titan-release
          path: ${{ matrix.path }}
          if-no-files-found: ignore